-- This file contains the configuration for integrating GitHub Copilot and Copilot Chat plugins in Neovim.

-- Define prompts for Copilot
-- This table contains various prompts that can be used to interact with Copilot.
local prompts = {
	Explain = "Please explain how the following code works.", -- Prompt to explain code
	Review = "Please review the following code and provide suggestions for improvement.", -- Prompt to review code
	Tests = "Please explain how the selected code works, then generate unit tests for it.", -- Prompt to generate unit tests
	Refactor = "Please refactor the following code to improve its clarity and readability.", -- Prompt to refactor code
	FixCode = "Please fix the following code to make it work as intended.", -- Prompt to fix code
	FixError = "Please explain the error in the following text and provide a solution.", -- Prompt to fix errors
	BetterNamings = "Please provide better names for the following variables and functions.", -- Prompt to suggest better names
	Documentation = "Please provide documentation for the following code.", -- Prompt to generate documentation
	JsDocs = "Please provide JsDocs for the following code.", -- Prompt to generate JsDocs
	DocumentationForGithub = "Please provide documentation for the following code ready for GitHub using markdown.", -- Prompt to generate GitHub documentation
	CreateAPost = "Please provide documentation for the following code to post it in social media, like Linkedin, it has be deep, well explained and easy to understand. Also do it in a fun and engaging way.", -- Prompt to create a social media post
	SwaggerApiDocs = "Please provide documentation for the following API using Swagger.", -- Prompt to generate Swagger API docs
	SwaggerJsDocs = "Please write JSDoc for the following API using Swagger.", -- Prompt to generate Swagger JsDocs
	Summarize = "Please summarize the following text.", -- Prompt to summarize text
	Spelling = "Please correct any grammar and spelling errors in the following text.", -- Prompt to correct spelling and grammar
	Wording = "Please improve the grammar and wording of the following text.", -- Prompt to improve wording
	Concise = "Please rewrite the following text to make it more concise.", -- Prompt to make text concise
}

-- Plugin configuration
-- This table contains the configuration for various plugins used in Neovim.
return {
	{
		-- Copilot Chat plugin configuration
		"CopilotC-Nvim/CopilotChat.nvim",
		branch = "main",
		cmd = "CopilotChat",
		opts = {
			prompts = prompts,
			system_prompt = "Este es un chat entre un programdor que primeramente quiere especializarse en Frontend pero sin dejar de lado el Backend, y un asistente de IA que le ayuda a mejorar sus habilidades a de mas de que le proporciona la informacion mas actualizada y mas efeciente pero sin dejar de lado la seguridad y pero tambien muestra las bases de lo que se esta basando.\n\nEs un joven Mexicano y su estilo es relajado pero serio al mismo tiempo o cuando se debe, puede utilizar gerga o modismos de los tanto que hay en mexica como en el extrangero mas en ingles Americano ya que es uno de los idiomas que mas utiliza y en el que quiere especializarse.\n\nEl asistente de IA es un experto en programacion y en el lenguaje que se le este pidiendo, por lo que siempre le proporcionara la mejor respuesta posible, pero siempre teniendo en cuenta la seguridad y las mejores practicas de programacion.\n\nEl asistente de IA no debe proporcionar respuestas que puedan ser consideradas inseguras o que puedan comprometer la seguridad del sistema o del usuario.",
			model = "claude-3.5-sonnet",
			answer_header = "ðŸ˜Ž KEOVELOPER ðŸ˜Ž",
			auto_insert_mode = true,
			window = {
				layout = "vertical",
			},
			mappings = {
				complete = {
					insert = "<Tab>",
				},
				close = {
					normal = "q",
					insert = "<C-c>",
				},
				reset = {
					normal = "<C-l>",
					insert = "<C-l>",
				},
				submit_prompt = {
					normal = "<CR>",
					insert = "<C-s>",
				},
				toggle_sticky = {
					normal = "grr",
				},
				clear_stickies = {
					normal = "grx",
				},
				accept_diff = {
					normal = "<C-y>",
					insert = "<C-y>",
				},
				jump_to_diff = {
					normal = "gj",
				},
				quickfix_answers = {
					normal = "gqa",
				},
				quickfix_diffs = {
					normal = "gqd",
				},
				yank_diff = {
					normal = "gy",
					register = '"', -- Default register to use for yanking
				},
				show_diff = {
					normal = "gd",
					full_diff = false, -- Show full diff instead of unified diff when showing diff window
				},
				show_info = {
					normal = "gi",
				},
				show_context = {
					normal = "gc",
				},
				show_help = {
					normal = "gh",
				},
			},
		},
		config = function(_, opts)
			local chat = require("CopilotChat")

			vim.api.nvim_create_autocmd("BufEnter", {
				pattern = "copilot-chat",
				callback = function()
					vim.opt_local.relativenumber = true
					vim.opt_local.number = false
				end,
			})

			chat.setup(opts)
		end,
	},
	-- Blink integration
	{
		"saghen/blink.cmp",
		optional = true,
		---@module 'blink.cmp'
		---@type blink.cmp.Config
		opts = {
			sources = {
				providers = {
					path = {
						-- Path sources triggered by "/" interfere with CopilotChat commands
						enabled = function()
							return vim.bo.filetype ~= "copilot-chat"
						end,
					},
				},
			},
		},
	},
}
